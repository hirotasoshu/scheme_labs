#lang scheme
(define (digits-sum n)
  (define (iter n s)
    (if(= n 0)
       s
       (iter (quotient n 10) (+ s (remainder n 10)))))
  (iter n 0))
(define (next-sum n)
  (define s (digits-sum n))
  (define (iter k)
    (define next-k (+ k 9))
    (if (= s (digits-sum next-k))
        next-k
        (iter next-k)))
  (iter n))
(define (list->int lst)
  (define (iter lst n)
    (if (empty? lst)
        n
        (iter (cdr lst) (+ (* 10 n) (car lst)))))
  (iter lst 0))
(define (build-number s)
  (define (iter lst s)
    (if(< s 10)
       (list->int (cons s lst))
       (iter (cons 9 lst) (- s 9))))
  (iter '() s))
(define (nearest-number-with-digsum n s)
  (define (iter m k result)
    (define diff (abs (- n k)))
    (if(> diff m)
       result
       (iter diff (next-sum k) k)))
  (let ([builded-number (build-number s)])
    (iter (abs (- n builded-number)) builded-number 0)))