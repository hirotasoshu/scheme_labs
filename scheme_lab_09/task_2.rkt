#lang scheme
(define (build-matrix n)
  (define (builder k)
    (append (build-list k (lambda(x) 1)) (build-list (- (ceiling (/ n 2)) k) (lambda(x) 0))))
  (define iter (build-list (ceiling (/ n 2)) (lambda (x) (+ x 1))))
  (define row_res (foldr (lambda (i res)
                           (if (even? n)
                               (cons (append (builder i) (reverse (builder i))) res)
                               (cons (append (builder i) (cdr (reverse (builder i)))) res)))
                         '() iter))
  (if (even? n)
      (append row_res (reverse row_res))
      (append row_res (cdr (reverse row_res))))
  )
